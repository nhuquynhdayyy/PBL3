using Microsoft.AspNetCore.Mvc;
using TourismWeb.Models;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;
using System.Security.Cryptography;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;

using System.Globalization;

namespace TourismWeb.Controllers
{
    public class UsersController : Controller
    {
        private readonly ApplicationDbContext _context;

        public UsersController(ApplicationDbContext context)
        {
            _context = context;
        }

        // Hi·ªÉn th·ªã form ƒëƒÉng k√Ω
        public IActionResult Register()
        {
            return View();
        }

        // X·ª≠ l√Ω ƒëƒÉng k√Ω
        [HttpPost]
        public async Task<IActionResult> Register(User user)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values.SelectMany(v => v.Errors);
                foreach (var error in errors)
                {
                    Console.WriteLine(error.ErrorMessage); // In l·ªói ra console
                }
                return View(user);
            }

            // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
            var existingUser = _context.Users.FirstOrDefault(u => u.Email == user.Email);
            if (existingUser != null)
            {
                ModelState.AddModelError("Email", "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
                return View(user);
            }

            // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
            user.Role = user.Role ?? "User";  // M·∫∑c ƒë·ªãnh l√† User
            user.AvatarUrl = string.IsNullOrEmpty(user.AvatarUrl) ? "default-avatar.png" : user.AvatarUrl; // Avatar m·∫∑c ƒë·ªãnh
            user.PhoneNumber = string.IsNullOrEmpty(user.PhoneNumber) ? "0000000000" : user.PhoneNumber; // S·ªë ƒëi·ªán tho·∫°i gi·∫£ ƒë·ªãnh
            user.TwoFaSecret = user.TwoFaSecret ?? ""; // N·∫øu kh√¥ng d√πng 2FA, ƒë·ªÉ tr·ªëng
            user.CreatedAt = DateTime.Now;

            // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u (Kh√¥ng d√πng salt)
            user.PasswordHash = HashPassword(user.PasswordHash);

            try
            {
                // Th√™m user v√†o database
                _context.Users.Add(user);
                await _context.SaveChangesAsync();

                // G·ª≠i th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng
                ViewBag.SuccessMessage = "ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.";

                // Hi·ªÉn th·ªã l·∫°i form nh∆∞ng c√≥ n√∫t ƒëƒÉng nh·∫≠p
                return View();
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", "C√≥ l·ªói x·∫£y ra: " + ex.Message);
                return View(user);
            }
        }

        // M√£ h√≥a m·∫≠t kh·∫©u (Kh√¥ng d√πng salt)
        private string HashPassword(string password)
        {
            return Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: password,
                salt: new byte[16], // Kh√¥ng d√πng salt
                prf: KeyDerivationPrf.HMACSHA256,
                iterationCount: 10000,
                numBytesRequested: 256 / 8));
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(string UsernameOrEmail, string Password)
        {
            // Ki·ªÉm tra n·∫øu Session ƒë√£ s·∫µn s√†ng
            if (HttpContext.Session == null)
            {
                return BadRequest("Session ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y ki·ªÉm tra c·∫•u h√¨nh Startup.cs ho·∫∑c Program.cs.");
            }

            // T√¨m ng∆∞·ªùi d√πng theo email ho·∫∑c username
            var user = _context.Users.FirstOrDefault(u => u.Email == UsernameOrEmail || u.Username == UsernameOrEmail);

            if (user == null)
            {
                ModelState.AddModelError("", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
                return View();
            }

            if (string.IsNullOrEmpty(Password))
            {
                ModelState.AddModelError("Password", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                return View();
            }

            // Hash m·∫≠t kh·∫©u nh·∫≠p v√†o ƒë·ªÉ so s√°nh v·ªõi database
            string hashedInputPassword = HashPassword(Password);

            if (user.PasswordHash != hashedInputPassword)
            {
                ModelState.AddModelError("", "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!");
                return View();
            }

            // L∆∞u session
            HttpContext.Session.SetString("UserId", user.UserId.ToString());
            HttpContext.Session.SetString("Username", user.Username);
            HttpContext.Session.SetString("UserRole", user.Role); // L∆∞u vai tr√≤ v√†o session

            // üîπ L∆∞u Authentication Cookie (N·∫æU D√ôNG AUTHENTICATION)
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.Role, CultureInfo.CurrentCulture.TextInfo.ToTitleCase(user.Role.ToLower()))

            };

            // var claimsIdentity = new ClaimsIdentity(claims, "CookieAuth");
            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            // await HttpContext.SignInAsync("CookieAuth", claimsPrincipal);
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

            // Console.WriteLine("[DEBUG] Session:");
            // Console.WriteLine("UserId: " + HttpContext.Session.GetString("UserId"));
            // Console.WriteLine("Username: " + HttpContext.Session.GetString("Username"));
            // Console.WriteLine("UserRole: " + HttpContext.Session.GetString("UserRole"));

            // Console.WriteLine("[DEBUG] Claims:");
            // foreach (var claim in claims)
            // {
            //     Console.WriteLine($"Type: {claim.Type}, Value: {claim.Value}");
            // }
            user.LastLoginAt = DateTime.Now;
            _context.Update(user);
            await _context.SaveChangesAsync();

            // Ki·ªÉm tra xem c√≥ URL n√†o c·∫ßn chuy·ªÉn h∆∞·ªõng kh√¥ng
            string redirectUrl = HttpContext.Session.GetString("RedirectAfterLogin");
            if (!string.IsNullOrEmpty(redirectUrl))
            {
                HttpContext.Session.Remove("RedirectAfterLogin"); // X√≥a sau khi s·ª≠ d·ª•ng
                return Redirect(redirectUrl);
            }

            if (user.Role == "admin")
                return RedirectToAction("Index", "Admin");
            else
                return RedirectToAction("Index", "Home");
        }

        public IActionResult TestSession()
        {
            HttpContext.Session.SetString("TestKey", "Session is working!");
            string value = HttpContext.Session.GetString("TestKey");

            return Content(value ?? "Session is NOT working!");
        }

        public async Task<IActionResult> Logout()
        {
            // await HttpContext.SignOutAsync("CookieAuth"); // S·ª≠ d·ª•ng ƒë√∫ng scheme ƒë√£ ƒëƒÉng k√Ω
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            HttpContext.Session.Clear(); // X√≥a session
            return RedirectToAction("Index", "Home");
        }

        [HttpGet("Profile")]
        public IActionResult Profile()
        {
            return View();
        }

        // [Authorize(Roles = "Admin")]
        // public IActionResult Dashboard()
        // {
        //     return View();
        // }

    }
}
